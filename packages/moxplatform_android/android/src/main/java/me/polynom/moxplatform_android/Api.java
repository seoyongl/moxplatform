// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package me.polynom.moxplatform_android;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Api {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum NotificationIcon {
    WARNING(0),
    ERROR(1),
    NONE(2);

    final int index;

    private NotificationIcon(final int index) {
      this.index = index;
    }
  }

  public enum NotificationEventType {
    MARK_AS_READ(0),
    REPLY(1),
    OPEN(2);

    final int index;

    private NotificationEventType(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NotificationMessageContent {
    /** The textual body of the message. */
    private @Nullable String body;

    public @Nullable String getBody() {
      return body;
    }

    public void setBody(@Nullable String setterArg) {
      this.body = setterArg;
    }

    /** The path and mime type of the media to show. */
    private @Nullable String mime;

    public @Nullable String getMime() {
      return mime;
    }

    public void setMime(@Nullable String setterArg) {
      this.mime = setterArg;
    }

    private @Nullable String path;

    public @Nullable String getPath() {
      return path;
    }

    public void setPath(@Nullable String setterArg) {
      this.path = setterArg;
    }

    public static final class Builder {

      private @Nullable String body;

      public @NonNull Builder setBody(@Nullable String setterArg) {
        this.body = setterArg;
        return this;
      }

      private @Nullable String mime;

      public @NonNull Builder setMime(@Nullable String setterArg) {
        this.mime = setterArg;
        return this;
      }

      private @Nullable String path;

      public @NonNull Builder setPath(@Nullable String setterArg) {
        this.path = setterArg;
        return this;
      }

      public @NonNull NotificationMessageContent build() {
        NotificationMessageContent pigeonReturn = new NotificationMessageContent();
        pigeonReturn.setBody(body);
        pigeonReturn.setMime(mime);
        pigeonReturn.setPath(path);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(body);
      toListResult.add(mime);
      toListResult.add(path);
      return toListResult;
    }

    static @NonNull NotificationMessageContent fromList(@NonNull ArrayList<Object> list) {
      NotificationMessageContent pigeonResult = new NotificationMessageContent();
      Object body = list.get(0);
      pigeonResult.setBody((String) body);
      Object mime = list.get(1);
      pigeonResult.setMime((String) mime);
      Object path = list.get(2);
      pigeonResult.setPath((String) path);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NotificationMessage {
    /** The sender of the message. */
    private @NonNull String sender;

    public @NonNull String getSender() {
      return sender;
    }

    public void setSender(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sender\" is null.");
      }
      this.sender = setterArg;
    }

    /** The jid of the sender. */
    private @NonNull String jid;

    public @NonNull String getJid() {
      return jid;
    }

    public void setJid(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"jid\" is null.");
      }
      this.jid = setterArg;
    }

    /** The body of the message. */
    private @NonNull NotificationMessageContent content;

    public @NonNull NotificationMessageContent getContent() {
      return content;
    }

    public void setContent(@NonNull NotificationMessageContent setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"content\" is null.");
      }
      this.content = setterArg;
    }

    /** Milliseconds since epoch. */
    private @NonNull Long timestamp;

    public @NonNull Long getTimestamp() {
      return timestamp;
    }

    public void setTimestamp(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"timestamp\" is null.");
      }
      this.timestamp = setterArg;
    }

    /** The path to the avatar to use */
    private @Nullable String avatarPath;

    public @Nullable String getAvatarPath() {
      return avatarPath;
    }

    public void setAvatarPath(@Nullable String setterArg) {
      this.avatarPath = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    NotificationMessage() {}

    public static final class Builder {

      private @Nullable String sender;

      public @NonNull Builder setSender(@NonNull String setterArg) {
        this.sender = setterArg;
        return this;
      }

      private @Nullable String jid;

      public @NonNull Builder setJid(@NonNull String setterArg) {
        this.jid = setterArg;
        return this;
      }

      private @Nullable NotificationMessageContent content;

      public @NonNull Builder setContent(@NonNull NotificationMessageContent setterArg) {
        this.content = setterArg;
        return this;
      }

      private @Nullable Long timestamp;

      public @NonNull Builder setTimestamp(@NonNull Long setterArg) {
        this.timestamp = setterArg;
        return this;
      }

      private @Nullable String avatarPath;

      public @NonNull Builder setAvatarPath(@Nullable String setterArg) {
        this.avatarPath = setterArg;
        return this;
      }

      public @NonNull NotificationMessage build() {
        NotificationMessage pigeonReturn = new NotificationMessage();
        pigeonReturn.setSender(sender);
        pigeonReturn.setJid(jid);
        pigeonReturn.setContent(content);
        pigeonReturn.setTimestamp(timestamp);
        pigeonReturn.setAvatarPath(avatarPath);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(sender);
      toListResult.add(jid);
      toListResult.add((content == null) ? null : content.toList());
      toListResult.add(timestamp);
      toListResult.add(avatarPath);
      return toListResult;
    }

    static @NonNull NotificationMessage fromList(@NonNull ArrayList<Object> list) {
      NotificationMessage pigeonResult = new NotificationMessage();
      Object sender = list.get(0);
      pigeonResult.setSender((String) sender);
      Object jid = list.get(1);
      pigeonResult.setJid((String) jid);
      Object content = list.get(2);
      pigeonResult.setContent((content == null) ? null : NotificationMessageContent.fromList((ArrayList<Object>) content));
      Object timestamp = list.get(3);
      pigeonResult.setTimestamp((timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer) timestamp : (Long) timestamp));
      Object avatarPath = list.get(4);
      pigeonResult.setAvatarPath((String) avatarPath);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class MessagingNotification {
    /** The title of the conversation. */
    private @NonNull String title;

    public @NonNull String getTitle() {
      return title;
    }

    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    /** The id of the notification. */
    private @NonNull Long id;

    public @NonNull Long getId() {
      return id;
    }

    public void setId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    /** The id of the notification channel the notification should appear on. */
    private @NonNull String channelId;

    public @NonNull String getChannelId() {
      return channelId;
    }

    public void setChannelId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"channelId\" is null.");
      }
      this.channelId = setterArg;
    }

    /** The JID of the chat in which the notifications happen. */
    private @NonNull String jid;

    public @NonNull String getJid() {
      return jid;
    }

    public void setJid(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"jid\" is null.");
      }
      this.jid = setterArg;
    }

    /** Messages to show. */
    private @NonNull List<NotificationMessage> messages;

    public @NonNull List<NotificationMessage> getMessages() {
      return messages;
    }

    public void setMessages(@NonNull List<NotificationMessage> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"messages\" is null.");
      }
      this.messages = setterArg;
    }

    /** Flag indicating whether this notification is from a groupchat or not. */
    private @NonNull Boolean isGroupchat;

    public @NonNull Boolean getIsGroupchat() {
      return isGroupchat;
    }

    public void setIsGroupchat(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isGroupchat\" is null.");
      }
      this.isGroupchat = setterArg;
    }

    /** Additional data to include. */
    private @Nullable Map<String, String> extra;

    public @Nullable Map<String, String> getExtra() {
      return extra;
    }

    public void setExtra(@Nullable Map<String, String> setterArg) {
      this.extra = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    MessagingNotification() {}

    public static final class Builder {

      private @Nullable String title;

      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable Long id;

      public @NonNull Builder setId(@NonNull Long setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String channelId;

      public @NonNull Builder setChannelId(@NonNull String setterArg) {
        this.channelId = setterArg;
        return this;
      }

      private @Nullable String jid;

      public @NonNull Builder setJid(@NonNull String setterArg) {
        this.jid = setterArg;
        return this;
      }

      private @Nullable List<NotificationMessage> messages;

      public @NonNull Builder setMessages(@NonNull List<NotificationMessage> setterArg) {
        this.messages = setterArg;
        return this;
      }

      private @Nullable Boolean isGroupchat;

      public @NonNull Builder setIsGroupchat(@NonNull Boolean setterArg) {
        this.isGroupchat = setterArg;
        return this;
      }

      private @Nullable Map<String, String> extra;

      public @NonNull Builder setExtra(@Nullable Map<String, String> setterArg) {
        this.extra = setterArg;
        return this;
      }

      public @NonNull MessagingNotification build() {
        MessagingNotification pigeonReturn = new MessagingNotification();
        pigeonReturn.setTitle(title);
        pigeonReturn.setId(id);
        pigeonReturn.setChannelId(channelId);
        pigeonReturn.setJid(jid);
        pigeonReturn.setMessages(messages);
        pigeonReturn.setIsGroupchat(isGroupchat);
        pigeonReturn.setExtra(extra);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(title);
      toListResult.add(id);
      toListResult.add(channelId);
      toListResult.add(jid);
      toListResult.add(messages);
      toListResult.add(isGroupchat);
      toListResult.add(extra);
      return toListResult;
    }

    static @NonNull MessagingNotification fromList(@NonNull ArrayList<Object> list) {
      MessagingNotification pigeonResult = new MessagingNotification();
      Object title = list.get(0);
      pigeonResult.setTitle((String) title);
      Object id = list.get(1);
      pigeonResult.setId((id == null) ? null : ((id instanceof Integer) ? (Integer) id : (Long) id));
      Object channelId = list.get(2);
      pigeonResult.setChannelId((String) channelId);
      Object jid = list.get(3);
      pigeonResult.setJid((String) jid);
      Object messages = list.get(4);
      pigeonResult.setMessages((List<NotificationMessage>) messages);
      Object isGroupchat = list.get(5);
      pigeonResult.setIsGroupchat((Boolean) isGroupchat);
      Object extra = list.get(6);
      pigeonResult.setExtra((Map<String, String>) extra);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RegularNotification {
    /** The title of the notification. */
    private @NonNull String title;

    public @NonNull String getTitle() {
      return title;
    }

    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    /** The body of the notification. */
    private @NonNull String body;

    public @NonNull String getBody() {
      return body;
    }

    public void setBody(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"body\" is null.");
      }
      this.body = setterArg;
    }

    /** The id of the channel to show the notification on. */
    private @NonNull String channelId;

    public @NonNull String getChannelId() {
      return channelId;
    }

    public void setChannelId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"channelId\" is null.");
      }
      this.channelId = setterArg;
    }

    /** The id of the notification. */
    private @NonNull Long id;

    public @NonNull Long getId() {
      return id;
    }

    public void setId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    /** The icon to use. */
    private @NonNull NotificationIcon icon;

    public @NonNull NotificationIcon getIcon() {
      return icon;
    }

    public void setIcon(@NonNull NotificationIcon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"icon\" is null.");
      }
      this.icon = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RegularNotification() {}

    public static final class Builder {

      private @Nullable String title;

      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String body;

      public @NonNull Builder setBody(@NonNull String setterArg) {
        this.body = setterArg;
        return this;
      }

      private @Nullable String channelId;

      public @NonNull Builder setChannelId(@NonNull String setterArg) {
        this.channelId = setterArg;
        return this;
      }

      private @Nullable Long id;

      public @NonNull Builder setId(@NonNull Long setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable NotificationIcon icon;

      public @NonNull Builder setIcon(@NonNull NotificationIcon setterArg) {
        this.icon = setterArg;
        return this;
      }

      public @NonNull RegularNotification build() {
        RegularNotification pigeonReturn = new RegularNotification();
        pigeonReturn.setTitle(title);
        pigeonReturn.setBody(body);
        pigeonReturn.setChannelId(channelId);
        pigeonReturn.setId(id);
        pigeonReturn.setIcon(icon);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(title);
      toListResult.add(body);
      toListResult.add(channelId);
      toListResult.add(id);
      toListResult.add(icon == null ? null : icon.index);
      return toListResult;
    }

    static @NonNull RegularNotification fromList(@NonNull ArrayList<Object> list) {
      RegularNotification pigeonResult = new RegularNotification();
      Object title = list.get(0);
      pigeonResult.setTitle((String) title);
      Object body = list.get(1);
      pigeonResult.setBody((String) body);
      Object channelId = list.get(2);
      pigeonResult.setChannelId((String) channelId);
      Object id = list.get(3);
      pigeonResult.setId((id == null) ? null : ((id instanceof Integer) ? (Integer) id : (Long) id));
      Object icon = list.get(4);
      pigeonResult.setIcon(icon == null ? null : NotificationIcon.values()[(int) icon]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NotificationEvent {
    /** The JID the notification was for. */
    private @NonNull String jid;

    public @NonNull String getJid() {
      return jid;
    }

    public void setJid(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"jid\" is null.");
      }
      this.jid = setterArg;
    }

    /** The type of event. */
    private @NonNull NotificationEventType type;

    public @NonNull NotificationEventType getType() {
      return type;
    }

    public void setType(@NonNull NotificationEventType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /**
     * An optional payload.
     * - type == NotificationType.reply: The reply message text.
     * Otherwise: undefined.
     */
    private @Nullable String payload;

    public @Nullable String getPayload() {
      return payload;
    }

    public void setPayload(@Nullable String setterArg) {
      this.payload = setterArg;
    }

    /** Extra data. Only set when type == NotificationType.reply. */
    private @Nullable Map<String, String> extra;

    public @Nullable Map<String, String> getExtra() {
      return extra;
    }

    public void setExtra(@Nullable Map<String, String> setterArg) {
      this.extra = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    NotificationEvent() {}

    public static final class Builder {

      private @Nullable String jid;

      public @NonNull Builder setJid(@NonNull String setterArg) {
        this.jid = setterArg;
        return this;
      }

      private @Nullable NotificationEventType type;

      public @NonNull Builder setType(@NonNull NotificationEventType setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String payload;

      public @NonNull Builder setPayload(@Nullable String setterArg) {
        this.payload = setterArg;
        return this;
      }

      private @Nullable Map<String, String> extra;

      public @NonNull Builder setExtra(@Nullable Map<String, String> setterArg) {
        this.extra = setterArg;
        return this;
      }

      public @NonNull NotificationEvent build() {
        NotificationEvent pigeonReturn = new NotificationEvent();
        pigeonReturn.setJid(jid);
        pigeonReturn.setType(type);
        pigeonReturn.setPayload(payload);
        pigeonReturn.setExtra(extra);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(jid);
      toListResult.add(type == null ? null : type.index);
      toListResult.add(payload);
      toListResult.add(extra);
      return toListResult;
    }

    static @NonNull NotificationEvent fromList(@NonNull ArrayList<Object> list) {
      NotificationEvent pigeonResult = new NotificationEvent();
      Object jid = list.get(0);
      pigeonResult.setJid((String) jid);
      Object type = list.get(1);
      pigeonResult.setType(type == null ? null : NotificationEventType.values()[(int) type]);
      Object payload = list.get(2);
      pigeonResult.setPayload((String) payload);
      Object extra = list.get(3);
      pigeonResult.setExtra((Map<String, String>) extra);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NotificationI18nData {
    /** The content of the reply button. */
    private @NonNull String reply;

    public @NonNull String getReply() {
      return reply;
    }

    public void setReply(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reply\" is null.");
      }
      this.reply = setterArg;
    }

    /** The content of the "mark as read" button. */
    private @NonNull String markAsRead;

    public @NonNull String getMarkAsRead() {
      return markAsRead;
    }

    public void setMarkAsRead(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"markAsRead\" is null.");
      }
      this.markAsRead = setterArg;
    }

    /** The text to show when *you* reply. */
    private @NonNull String you;

    public @NonNull String getYou() {
      return you;
    }

    public void setYou(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"you\" is null.");
      }
      this.you = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    NotificationI18nData() {}

    public static final class Builder {

      private @Nullable String reply;

      public @NonNull Builder setReply(@NonNull String setterArg) {
        this.reply = setterArg;
        return this;
      }

      private @Nullable String markAsRead;

      public @NonNull Builder setMarkAsRead(@NonNull String setterArg) {
        this.markAsRead = setterArg;
        return this;
      }

      private @Nullable String you;

      public @NonNull Builder setYou(@NonNull String setterArg) {
        this.you = setterArg;
        return this;
      }

      public @NonNull NotificationI18nData build() {
        NotificationI18nData pigeonReturn = new NotificationI18nData();
        pigeonReturn.setReply(reply);
        pigeonReturn.setMarkAsRead(markAsRead);
        pigeonReturn.setYou(you);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(reply);
      toListResult.add(markAsRead);
      toListResult.add(you);
      return toListResult;
    }

    static @NonNull NotificationI18nData fromList(@NonNull ArrayList<Object> list) {
      NotificationI18nData pigeonResult = new NotificationI18nData();
      Object reply = list.get(0);
      pigeonResult.setReply((String) reply);
      Object markAsRead = list.get(1);
      pigeonResult.setMarkAsRead((String) markAsRead);
      Object you = list.get(2);
      pigeonResult.setYou((String) you);
      return pigeonResult;
    }
  }

  private static class MoxplatformApiCodec extends StandardMessageCodec {
    public static final MoxplatformApiCodec INSTANCE = new MoxplatformApiCodec();

    private MoxplatformApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return MessagingNotification.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return NotificationEvent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return NotificationI18nData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return NotificationMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return NotificationMessageContent.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return RegularNotification.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof MessagingNotification) {
        stream.write(128);
        writeValue(stream, ((MessagingNotification) value).toList());
      } else if (value instanceof NotificationEvent) {
        stream.write(129);
        writeValue(stream, ((NotificationEvent) value).toList());
      } else if (value instanceof NotificationI18nData) {
        stream.write(130);
        writeValue(stream, ((NotificationI18nData) value).toList());
      } else if (value instanceof NotificationMessage) {
        stream.write(131);
        writeValue(stream, ((NotificationMessage) value).toList());
      } else if (value instanceof NotificationMessageContent) {
        stream.write(132);
        writeValue(stream, ((NotificationMessageContent) value).toList());
      } else if (value instanceof RegularNotification) {
        stream.write(133);
        writeValue(stream, ((RegularNotification) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MoxplatformApi {

    void createNotificationChannel(@NonNull String title, @NonNull String description, @NonNull String id, @NonNull Boolean urgent);

    void showMessagingNotification(@NonNull MessagingNotification notification);

    void showNotification(@NonNull RegularNotification notification);

    void dismissNotification(@NonNull Long id);

    void setNotificationSelfAvatar(@NonNull String path);

    void setNotificationI18n(@NonNull NotificationI18nData data);

    @NonNull 
    String getPersistentDataPath();

    @NonNull 
    String getCacheDataPath();

    void eventStub(@NonNull NotificationEvent event);

    /** The codec used by MoxplatformApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MoxplatformApiCodec.INSTANCE;
    }
    /**Sets up an instance of `MoxplatformApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable MoxplatformApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.createNotificationChannel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String titleArg = (String) args.get(0);
                String descriptionArg = (String) args.get(1);
                String idArg = (String) args.get(2);
                Boolean urgentArg = (Boolean) args.get(3);
                try {
                  api.createNotificationChannel(titleArg, descriptionArg, idArg, urgentArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.showMessagingNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                MessagingNotification notificationArg = (MessagingNotification) args.get(0);
                try {
                  api.showMessagingNotification(notificationArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.showNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RegularNotification notificationArg = (RegularNotification) args.get(0);
                try {
                  api.showNotification(notificationArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.dismissNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Number idArg = (Number) args.get(0);
                try {
                  api.dismissNotification((idArg == null) ? null : idArg.longValue());
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.setNotificationSelfAvatar", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String pathArg = (String) args.get(0);
                try {
                  api.setNotificationSelfAvatar(pathArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.setNotificationI18n", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                NotificationI18nData dataArg = (NotificationI18nData) args.get(0);
                try {
                  api.setNotificationI18n(dataArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.getPersistentDataPath", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getPersistentDataPath();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.getCacheDataPath", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getCacheDataPath();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.moxplatform_platform_interface.MoxplatformApi.eventStub", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                NotificationEvent eventArg = (NotificationEvent) args.get(0);
                try {
                  api.eventStub(eventArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
